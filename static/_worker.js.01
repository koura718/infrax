// export default {
//   fetch(request, env, context) {
//     return new Response('Hello');
//   },
// };

addEventListener('fetch', event => {
    let { pathname } = new URL(event.request.url);
  
    // Allow "/ignore/*" URLs to hit origin
    if (pathname.startsWith('/ignore/')) return;
  
    // Otherwise, respond with something
    event.respondWith(handler(event));
  });

// Format: Module Worker
export default {
    async fetch(request, env, context) {
      // Forward / Proxy original request
      let res = await fetch(request);
  
      // Add custom header(s)
      res = new Response(res.body, res);
      res.headers.set('x-foo', 'bar');
  
      // Cache the response
      // NOTE: Does NOT block / wait
      context.waitUntil(caches.default.put(request, res.clone()));
  
      // Done
      return res;
    },
  };

// Format: Module Worker
export default {
    async fetch(request, env, context) {
      // Proxy to origin on unhandled/uncaught exceptions
      context.passThroughOnException();
      throw new Error('Oops');
    },
  };